def pomPath = "app/pom.xml"
def valuesRepo = "https://github.com/vinga2805/ms.git"
def app = "ms"
def repoFullName = "vinga2805/ms"
def gitBranch = "master"
def registry = "${repoFullName}"
def registryCredential = 'docker_cred'
def dockerImage = ''
def namespace = "100ms"
pipeline {
    agent any
    stages{
        stage('Build Jar'){
            steps {
                script {
                    def pomVersion = readMavenPom(file: "$pomPath").getVersion()
                    def version = "${pomVersion}"
                    def lastCommitHash = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%H'").trim()
                    def lastCommitAuthorEmail = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%ae'").trim()
                    if (pomVersion.endsWith("-SNAPSHOT")) {
                        echo "Snapshot version detected"
                        shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
                        gitBranch = gitBranch.substring(gitBranch.indexOf('/') + 1)
                        pomVersion = pomVersion.substring(0, pomVersion.indexOf('-'))
                        imageFullName = "${repoFullName}" + ":" + "snapshot_${pomVersion}_${gitBranch}_${shortCommit}"
                        artifactVersion = "${pomVersion}-snapshot.${gitBranch}.${shortCommit}"
                    } else {
                        echo "Proper release detected"
                        imageFullName = "${repoFullName}" + ":" + "${pomVersion}"
                        artifactVersion = "${pomVersion}"
                    }
                }
                sh "mvn clean package -f ${pomPath}"
            }

        }
        stage('Create image') {
            steps {
                script {
                    dockerImage = docker.build("${imageFullName}", "./app/")
                }
                
            }
        }
        stage('Publish artifacts'){
            steps {
                script {
                    docker.withRegistry( '', registryCredential ) {
                    dockerImage.push()
                    }              
                }
            }
        }
        stage('Cleaning images from Jenkins') {         
            steps {
                sh "docker rmi ${imageFullName}"
            }
        }
        stage ('Update Image tags in chart repository') {
            steps {
                script {
                    echo "----I AM Executing----"
                      sh """#!/bin/bash -x
                         pip install pyyaml
                         pip install pybump
                         rm -rf values-files
                         git clone ${valuesRepo} values-files
                         python update_image.py ${imageFullName}
                      """
                }            
            }       
        }
        stage ('Bootstraping Application'){
            steps {
                script {
                    echo "-----Checking if Blue version exists-------"
                    sh """#!/bin/bash -x
                       source ~/.bashrc
                       version=`kubectl  get service ${app}-${app}-app-service-prod -o=jsonpath='{.spec.selector.slot}' --namespace=${namespace}`
                       #status=`helm list -n ${namespace} | awk \"{print \$1}\" | grep ${app} | wc -l`
                       status=0
                       if [ ${status} -ne 0 ]
                       echo "The application is already deployed and Prod is pointing to $version "
                       else
                       echo "The application is not deployed yet...."
                       echo "Deploying Blue version first"
                       helm install ${app} values-files/helm-charts/ms-app/ -n ${namespace}
                       fi
                    """ 
                }
            }
        }
        stage ('Blue/Green Deployment'){
            steps {
                script {
                    echo "-----Checking if Blue/Green version exists------"
                    sh """#!/bin/bash -x
                       source ~/.bashrc
                       version=`kubectl  get service ${app}-${app}-app-service-prod -o=jsonpath='{.spec.selector.slot}' --namespace=${namespace}`
                       if [ $version == "blue"]
                       then
                       new_version="green"
                       echo "Deploying application version: $new_version"
                       helm upgrade ${app} values-files/helm-charts/ms-app/ --set $new_version.enabled=true --reuse-values
                       sleep 30
                       echo "Testing application on newly staged environment"
                       if [ `curl -Iks http://ms-stage.vinga.tk/teslaDyDB/ | head -1 | cut -d " " -f2` == "200" ]
                       then
                       echo "Application healthcheck is successful on stage"
                       echo "Production can be pointed to the new stage environment"
                       helm upgrade ${app} values-files/helm-charts/ms-app/ --set productionSlot=$new_version --reuse-values
                       echo "Production is now pointed to new staged environment"
                       echo "Removing stage application"
                       helm upgrade ${app} values-files/helm-charts/ms-app/  --set $version.enabled=false --reuse-values
                       else
                       echo "Rolling back application"
                       helm upgrade ${app} values-files/helm-charts/ms-app/ --set $new_version.enabled=false --reuse-values
                       fi
                       else
                       new_version="blue"
                       echo "Deploying application version: $new_version"
                       helm upgrade ${app} values-files/helm-charts/ms-app/ --set $new_version.enabled=true --reuse-values
                       sleep 30
                       echo "Testing application on newly staged environment"
                       if [ `curl -Iks http://ms-stage.vinga.tk/teslaDyDB/ | head -1 | cut -d " " -f2` == "200" ]
                       then
                       echo "Application healthcheck is successful on stage"
                       echo "Production can be pointed to the new stage environment"
                       helm upgrade ${app} values-files/helm-charts/ms-app/ --set productionSlot=$new_version --reuse-values
                       echo "Production is now pointed to new staged environment"
                       echo "Removing stage application"
                       helm upgrade ${app} values-files/helm-charts/ms-app/  --set $version.enabled=false --reuse-values
                       else
                       echo "Rolling back application"
                       helm upgrade ${app} values-files/helm-charts/ms-app/ --set $new_version.enabled=false --reuse-values
                       fi
                       fi
                    """ 
                }
            }
        }

        stage ('Production healthcheck and github commit') {
            steps {
                script {
                     echo "Wait performing healthcheck...."
                     withCredentials([usernamePassword(credentialsId: 'github_cred', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                       sh """#!/bin/bash -x
                          source ~/.bashrc
                          sleep 60
                          if [ `curl -Iks http://ms-prod.vinga.tk/teslaDyDB/ | head -1 | cut -d " " -f2` == "200" ]
                          then 
                          echo "Procution healthcheck is successful"
                          echo "Application deployed successfully"
                          cd values-files
                          git checkout master
                          git add .
                          git commit -m "adding updated image"
                          git push git@github.com:vinga2805/ms.git 
                          cd ..
                          else
                          echo "Application healthcheck is unsuccessful."
                          echo "Rolling back the application..."
                          helm rollback ${app} -n ${namespace}
                          fi
                          rm -rf values-files
                       """
                     }
                }
            }
        }
    }
}
